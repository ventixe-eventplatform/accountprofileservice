// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Data;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250530121730_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Entities.AddressInfoEntity", b =>
                {
                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AddressInfos");
                });

            modelBuilder.Entity("WebApi.Entities.AddressTypeEntity", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressTypeId"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressTypes");

                    b.HasData(
                        new
                        {
                            AddressTypeId = 1,
                            AddressType = "Delivery Address"
                        },
                        new
                        {
                            AddressTypeId = 2,
                            AddressType = "Billing Address"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.ContactInfoEntity", b =>
                {
                    b.Property<string>("ContactInfoId")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ContactInfoId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("WebApi.Entities.ContactTypeEntity", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactTypeId"));

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactTypes");

                    b.HasData(
                        new
                        {
                            ContactTypeId = 1,
                            ContactType = "Email"
                        },
                        new
                        {
                            ContactTypeId = 2,
                            ContactType = "Phone"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.ProfileEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("WebApi.Entities.AddressInfoEntity", b =>
                {
                    b.HasOne("WebApi.Entities.AddressTypeEntity", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.ProfileEntity", "Profile")
                        .WithMany("AddressInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("WebApi.Entities.ContactInfoEntity", b =>
                {
                    b.HasOne("WebApi.Entities.ContactTypeEntity", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.ProfileEntity", "Profile")
                        .WithMany("ContactInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("WebApi.Entities.ProfileEntity", b =>
                {
                    b.Navigation("AddressInfos");

                    b.Navigation("ContactInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
